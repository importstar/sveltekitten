// This file is auto-generated by @hey-api/openapi-ts

export const AbilityChangeSchema = {
	type: 'object',
	properties: {
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		},
		effect_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityChangeEffectText'
			},
			readOnly: true
		}
	},
	required: ['effect_entries', 'version_group']
} as const;

export const AbilityChangeEffectTextSchema = {
	type: 'object',
	properties: {
		effect: {
			type: 'string',
			maxLength: 6000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['effect', 'language']
} as const;

export const AbilityDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		is_main_series: {
			type: 'boolean'
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityName'
			},
			readOnly: true
		},
		effect_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityEffectText'
			},
			readOnly: true
		},
		effect_changes: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityChange'
			},
			readOnly: true
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityFlavorText'
			},
			readOnly: true
		},
		pokemon: {
			type: 'array',
			items: {
				type: 'object',
				required: ['is_hidden', 'slot', 'pokemon'],
				properties: {
					is_hidden: {
						type: 'boolean'
					},
					slot: {
						type: 'integer',
						format: 'int32',
						examples: [3]
					},
					pokemon: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['gloom']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon/44/']
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'effect_changes',
		'effect_entries',
		'flavor_text_entries',
		'generation',
		'id',
		'name',
		'names',
		'pokemon'
	]
} as const;

export const AbilityEffectTextSchema = {
	type: 'object',
	properties: {
		effect: {
			type: 'string',
			maxLength: 6000
		},
		short_effect: {
			type: 'string',
			maxLength: 300
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['effect', 'language', 'short_effect']
} as const;

export const AbilityFlavorTextSchema = {
	type: 'object',
	properties: {
		flavor_text: {
			type: 'string'
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		}
	},
	required: ['flavor_text', 'language', 'version_group']
} as const;

export const AbilityNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const AbilitySummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const BerryDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		growth_time: {
			type: 'integer'
		},
		max_harvest: {
			type: 'integer'
		},
		natural_gift_power: {
			type: 'integer'
		},
		size: {
			type: 'integer'
		},
		smoothness: {
			type: 'integer'
		},
		soil_dryness: {
			type: 'integer'
		},
		firmness: {
			$ref: '#/components/schemas/BerryFirmnessSummary'
		},
		flavors: {
			type: 'array',
			items: {
				type: 'object',
				required: ['potency', 'flavor'],
				properties: {
					potency: {
						type: 'integer',
						examples: [10]
					},
					flavor: {
						type: 'object',
						require: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								description: 'The name of the flavor',
								examples: ['spicy']
							},
							url: {
								type: 'string',
								format: 'uri',
								description: 'The URL to get more information about the flavor',
								examples: ['https://pokeapi.co/api/v2/berry-flavor/1/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		item: {
			$ref: '#/components/schemas/ItemSummary'
		},
		natural_gift_type: {
			$ref: '#/components/schemas/TypeSummary'
		}
	},
	required: [
		'firmness',
		'flavors',
		'growth_time',
		'id',
		'item',
		'max_harvest',
		'name',
		'natural_gift_power',
		'natural_gift_type',
		'size',
		'smoothness',
		'soil_dryness'
	]
} as const;

export const BerryFirmnessDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		berries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerrySummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerryFirmnessName'
			},
			readOnly: true
		}
	},
	required: ['berries', 'id', 'name', 'names']
} as const;

export const BerryFirmnessNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const BerryFirmnessSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const BerryFlavorDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		berries: {
			type: 'array',
			items: {
				type: 'object',
				required: ['potency', 'berry'],
				properties: {
					potency: {
						type: 'integer',
						examples: [10]
					},
					berry: {
						type: 'object',
						require: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								description: 'The name of the berry',
								examples: ['rowap']
							},
							url: {
								type: 'string',
								format: 'uri',
								description: 'The URL to get more information about the berry',
								examples: ['https://pokeapi.co/api/v2/berry/64/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		contest_type: {
			$ref: '#/components/schemas/ContestTypeSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerryFlavorName'
			},
			readOnly: true
		}
	},
	required: ['berries', 'contest_type', 'id', 'name', 'names']
} as const;

export const BerryFlavorNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const BerryFlavorSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const BerrySummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const CharacteristicDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const CharacteristicDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		gene_modulo: {
			type: 'integer'
		},
		possible_values: {
			type: 'array',
			items: {
				type: 'integer',
				format: 'int32'
			},
			examples: [[0, 5, 10, 15, 20, 25, 30]],
			readOnly: true
		},
		highest_stat: {
			$ref: '#/components/schemas/StatSummary'
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/CharacteristicDescription'
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'gene_modulo', 'highest_stat', 'id', 'possible_values']
} as const;

export const CharacteristicSummarySchema = {
	type: 'object',
	properties: {
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['url']
} as const;

export const ContestEffectDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		appeal: {
			type: 'integer'
		},
		jam: {
			type: 'integer'
		},
		effect_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ContestEffectEffectText'
			},
			readOnly: true
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ContestEffectFlavorText'
			},
			readOnly: true
		}
	},
	required: ['appeal', 'effect_entries', 'flavor_text_entries', 'id', 'jam']
} as const;

export const ContestEffectEffectTextSchema = {
	type: 'object',
	properties: {
		effect: {
			type: 'string',
			maxLength: 6000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['effect', 'language']
} as const;

export const ContestEffectFlavorTextSchema = {
	type: 'object',
	properties: {
		flavor_text: {
			type: 'string',
			maxLength: 500
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['flavor_text', 'language']
} as const;

export const ContestEffectSummarySchema = {
	type: 'object',
	properties: {
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['url']
} as const;

export const ContestTypeDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		berry_flavor: {
			allOf: [
				{
					$ref: '#/components/schemas/BerryFlavorSummary'
				}
			],
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ContestTypeName'
			},
			readOnly: true
		}
	},
	required: ['berry_flavor', 'id', 'name', 'names']
} as const;

export const ContestTypeNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		color: {
			type: 'string',
			maxLength: 10
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['color', 'language', 'name']
} as const;

export const ContestTypeSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const EggGroupDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EggGroupName'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				type: 'object',
				required: ['potency', 'flavor'],
				properties: {
					name: {
						type: 'string',
						description: 'Pokemon species name.',
						examples: ['bulbasaur']
					},
					url: {
						type: 'string',
						format: 'uri',
						description: 'The URL to get more information about the species',
						examples: ['https://pokeapi.co/api/v2/pokemon-species/1/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'pokemon_species']
} as const;

export const EggGroupNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const EggGroupSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const EncounterConditionDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		values: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterConditionValueSummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterConditionName'
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'values']
} as const;

export const EncounterConditionNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const EncounterConditionSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const EncounterConditionValueDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		condition: {
			$ref: '#/components/schemas/EncounterConditionSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterConditionValueName'
			},
			readOnly: true
		}
	},
	required: ['condition', 'id', 'name', 'names']
} as const;

export const EncounterConditionValueNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const EncounterConditionValueSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const EncounterMethodDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		order: {
			type: ['integer', 'null']
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterMethodName'
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names']
} as const;

export const EncounterMethodNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const EncounterMethodSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const EvolutionChainDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		baby_trigger_item: {
			$ref: '#/components/schemas/ItemSummary'
		},
		chain: {
			type: 'object',
			required: ['evolution_details', 'evolves_to', 'is_baby', 'species'],
			properties: {
				evolution_details: {
					type: 'array',
					items: {},
					examples: []
				},
				evolves_to: {
					type: 'array',
					items: {
						type: 'object',
						required: ['evolution_details', 'evolves_to', 'is_baby', 'species'],
						properties: {
							evolution_details: {
								type: 'array',
								items: {
									type: 'object',
									required: [
										'gender',
										'held_item',
										'item',
										'known_move',
										'known_move_type',
										'location',
										'min_affection',
										'min_beauty',
										'min_happiness',
										'min_level',
										'needs_overworld_rain',
										'party_species',
										'party_type',
										'relative_physical_stats',
										'time_of_day',
										'trade_species',
										'trigger',
										'turn_upside_down'
									],
									properties: {
										gender: {
											type: 'object',
											nullable: true,
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string',
													examples: [1]
												},
												url: {
													type: 'string',
													format: 'uri',
													examples: [2]
												}
											}
										},
										held_item: {
											type: 'object',
											nullable: true,
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string',
													examples: [1]
												},
												url: {
													type: 'string',
													format: 'uri',
													examples: [2]
												}
											}
										},
										item: {
											type: 'object',
											nullable: true,
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string',
													examples: [1]
												},
												url: {
													type: 'string',
													format: 'uri',
													examples: [2]
												}
											}
										},
										known_move: {
											type: '',
											nullable: true
										},
										known_move_type: {
											type: '',
											nullable: true
										},
										location: {
											type: 'object',
											nullable: true,
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string'
												},
												url: {
													type: 'string',
													format: 'uri'
												}
											}
										},
										min_affection: {
											type: 'integer',
											format: 'int32',
											nullable: true
										},
										min_beauty: {
											type: 'integer',
											format: 'int32',
											nullable: true
										},
										min_happiness: {
											type: 'integer',
											format: 'int32',
											nullable: true
										},
										min_level: {
											type: 'integer',
											format: 'int32',
											nullable: true
										},
										needs_overworld_rain: {
											type: 'boolean',
											nullable: true
										},
										party_species: {
											type: 'string',
											nullable: true
										},
										party_type: {
											type: 'string',
											nullable: true
										},
										relative_physical_stats: {
											type: 'string',
											nullable: true
										},
										time_of_day: {
											type: 'string'
										},
										trade_species: {
											type: 'string',
											nullable: true
										},
										trigger: {
											type: 'object',
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string'
												},
												url: {
													type: 'string',
													format: 'uri'
												}
											}
										},
										turn_upside_down: {
											type: 'boolean'
										}
									}
								}
							},
							is_baby: {
								type: 'boolean'
							},
							species: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['happiny']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/pokemon-species/440/']
									}
								}
							}
						}
					}
				},
				is_baby: {
					type: 'boolean'
				},
				species: {
					type: 'object',
					required: ['name', 'url'],
					properties: {
						name: {
							type: 'string',
							examples: ['happiny']
						},
						url: {
							type: 'string',
							format: 'uri',
							examples: ['https://pokeapi.co/api/v2/pokemon-species/440/']
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: ['baby_trigger_item', 'chain', 'id']
} as const;

export const EvolutionChainSummarySchema = {
	type: 'object',
	properties: {
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['url']
} as const;

export const EvolutionTriggerDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EvolutionTriggerName'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['ivysaur']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/pokemon-species/2/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'pokemon_species']
} as const;

export const EvolutionTriggerNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const EvolutionTriggerSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ExperienceSchema = {
	type: 'object',
	properties: {
		level: {
			type: 'integer'
		},
		experience: {
			type: 'integer'
		}
	},
	required: ['experience', 'level']
} as const;

export const GenderDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		pokemon_species_details: {
			type: 'array',
			items: {
				type: 'object',
				required: ['rate', 'pokemon_species'],
				properties: {
					rate: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					},
					pokemon_species: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bulbasaur']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon-species/1/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		required_for_evolution: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['wormadam']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/pokemon-species/413/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'pokemon_species_details', 'required_for_evolution']
} as const;

export const GenderSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const GenerationDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		abilities: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilitySummary'
			},
			readOnly: true
		},
		main_region: {
			$ref: '#/components/schemas/RegionSummary'
		},
		moves: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/GenerationName'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			},
			readOnly: true
		},
		types: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/TypeSummary'
			},
			readOnly: true
		},
		version_groups: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/VersionGroupSummary'
			},
			readOnly: true
		}
	},
	required: [
		'abilities',
		'id',
		'main_region',
		'moves',
		'name',
		'names',
		'pokemon_species',
		'types',
		'version_groups'
	]
} as const;

export const GenerationNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const GenerationSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const GrowthRateDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const GrowthRateDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		formula: {
			type: 'string',
			maxLength: 500
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/GrowthRateDescription'
			},
			readOnly: true
		},
		levels: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Experience'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'formula', 'id', 'levels', 'name', 'pokemon_species']
} as const;

export const GrowthRateSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ItemAttributeDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const ItemAttributeDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemAttributeDescription'
			},
			readOnly: true
		},
		items: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['master-ball']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/item/1/']
					}
				}
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemAttributeName'
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'items', 'name', 'names']
} as const;

export const ItemAttributeNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const ItemAttributeSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ItemCategoryDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		items: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemSummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemCategoryName'
			},
			readOnly: true
		},
		pocket: {
			$ref: '#/components/schemas/ItemPocketSummary'
		}
	},
	required: ['id', 'items', 'name', 'names', 'pocket']
} as const;

export const ItemCategoryNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const ItemCategorySummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ItemDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		cost: {
			type: ['integer', 'null']
		},
		fling_power: {
			type: ['integer', 'null']
		},
		fling_effect: {
			$ref: '#/components/schemas/ItemFlingEffectSummary'
		},
		attributes: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['countable']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/item-attribute/1/']
					}
				}
			},
			readOnly: true
		},
		category: {
			$ref: '#/components/schemas/ItemCategorySummary'
		},
		effect_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemEffectText'
			},
			readOnly: true
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemFlavorText'
			},
			readOnly: true
		},
		game_indices: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemGameIndex'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemName'
			},
			readOnly: true
		},
		held_by_pokemon: {
			type: 'array',
			items: {
				type: 'object',
				required: ['pokemon', 'version-details'],
				properties: {
					pokemon: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['farfetchd']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon/83/']
							}
						}
					},
					'version-details': {
						type: 'array',
						items: {
							type: 'object',
							required: ['rarity', 'version'],
							properties: {
								rarity: {
									type: 'integer',
									format: 'int32',
									examples: [5]
								},
								version: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['ruby']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/version/7/']
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		sprites: {
			type: 'object',
			required: ['default'],
			properties: {
				default: {
					type: 'string',
					format: 'uri',
					examples: ['https://pokeapi.co/media/sprites/items/master-ball.png']
				}
			},
			readOnly: true
		},
		baby_trigger_for: {
			type: 'object',
			required: ['url'],
			properties: {
				url: {
					type: 'string',
					format: 'uri',
					examples: ['https://pokeapi.co/api/v2/evolution-chain/51/']
				}
			},
			readOnly: true
		},
		machines: {
			type: 'array',
			items: {
				type: 'object',
				required: ['machine', 'version_group'],
				properties: {
					machine: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/machine/1/']
					},
					version_group: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['sword-shield']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/version-group/20/']
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'attributes',
		'baby_trigger_for',
		'category',
		'effect_entries',
		'flavor_text_entries',
		'fling_effect',
		'game_indices',
		'held_by_pokemon',
		'id',
		'machines',
		'name',
		'names',
		'sprites'
	]
} as const;

export const ItemEffectTextSchema = {
	type: 'object',
	properties: {
		effect: {
			type: 'string',
			maxLength: 6000
		},
		short_effect: {
			type: 'string',
			maxLength: 300
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['effect', 'language', 'short_effect']
} as const;

export const ItemFlavorTextSchema = {
	type: 'object',
	properties: {
		text: {
			type: 'string'
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'text', 'version_group']
} as const;

export const ItemFlingEffectDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		effect_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemFlingEffectEffectText'
			},
			readOnly: true
		},
		items: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemSummary'
			},
			readOnly: true
		}
	},
	required: ['effect_entries', 'id', 'items', 'name']
} as const;

export const ItemFlingEffectEffectTextSchema = {
	type: 'object',
	properties: {
		effect: {
			type: 'string',
			maxLength: 6000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['effect', 'language']
} as const;

export const ItemFlingEffectSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ItemGameIndexSchema = {
	type: 'object',
	properties: {
		game_index: {
			type: 'integer'
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		}
	},
	required: ['game_index', 'generation']
} as const;

export const ItemNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const ItemPocketDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		categories: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemCategorySummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemPocketName'
			},
			readOnly: true
		}
	},
	required: ['categories', 'id', 'name', 'names']
} as const;

export const ItemPocketNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const ItemPocketSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const ItemSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const LanguageDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		official: {
			type: 'boolean'
		},
		iso639: {
			type: 'string',
			maxLength: 10
		},
		iso3166: {
			type: 'string',
			maxLength: 2
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LanguageName'
			},
			readOnly: true
		}
	},
	required: ['id', 'iso3166', 'iso639', 'name', 'names']
} as const;

export const LanguageNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const LanguageSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const LocationAreaDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		game_index: {
			type: 'integer'
		},
		encounter_method_rates: {
			type: 'array',
			items: {
				type: 'object',
				required: ['encounter_method', 'version_details'],
				properties: {
					encounter_method: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['old-rod']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/encounter-method/2/']
							}
						}
					},
					version_details: {
						type: 'array',
						items: {
							type: 'object',
							required: ['rate', 'version'],
							properties: {
								rate: {
									type: 'integer',
									format: 'int32',
									examples: [5]
								},
								version: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['platinum']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/version/14/']
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		location: {
			$ref: '#/components/schemas/LocationSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationAreaName'
			},
			readOnly: true
		},
		pokemon_encounters: {
			type: 'array',
			items: {
				type: 'object',
				required: ['pokemon', 'version_details'],
				properties: {
					pokemon: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['tentacool']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon/72/']
							}
						}
					},
					version_details: {
						type: 'array',
						items: {
							type: 'object',
							required: ['version', 'max_chance', 'encounter_details'],
							properties: {
								version: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['diamond']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/version/12/']
										}
									}
								},
								max_chance: {
									type: 'integer',
									format: 'int32',
									examples: [60]
								},
								encounter_details: {
									type: 'object',
									required: ['min_level', 'max_level', 'condition_value', 'chance', 'method'],
									properties: {
										min_level: {
											type: 'integer',
											format: 'int32',
											examples: [20]
										},
										max_level: {
											type: 'integer',
											format: 'int32',
											examples: [30]
										},
										condition_values: {
											type: 'object',
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string',
													examples: ['slot2-sapphire']
												},
												url: {
													type: 'string',
													format: 'uri',
													examples: ['https://pokeapi.co/api/v2/encounter-condition-value/10/']
												}
											}
										},
										chance: {
											type: 'integer',
											format: 'int32',
											examples: [60]
										},
										method: {
											type: 'object',
											required: ['name', 'url'],
											properties: {
												name: {
													type: 'string',
													examples: ['surf']
												},
												url: {
													type: 'string',
													format: 'uri',
													examples: ['https://pokeapi.co/api/v2/encounter-method/5/']
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'encounter_method_rates',
		'game_index',
		'id',
		'location',
		'name',
		'names',
		'pokemon_encounters'
	]
} as const;

export const LocationAreaNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const LocationAreaSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const LocationDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		region: {
			$ref: '#/components/schemas/RegionSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationName'
			},
			readOnly: true
		},
		game_indices: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationGameIndex'
			},
			readOnly: true
		},
		areas: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationAreaSummary'
			},
			readOnly: true
		}
	},
	required: ['areas', 'game_indices', 'id', 'name', 'names', 'region']
} as const;

export const LocationGameIndexSchema = {
	type: 'object',
	properties: {
		game_index: {
			type: 'integer'
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		}
	},
	required: ['game_index', 'generation']
} as const;

export const LocationNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const LocationSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MachineDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		item: {
			$ref: '#/components/schemas/ItemSummary'
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		},
		move: {
			$ref: '#/components/schemas/MoveSummary'
		}
	},
	required: ['id', 'item', 'move', 'version_group']
} as const;

export const MachineSummarySchema = {
	type: 'object',
	properties: {
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['url']
} as const;

export const MoveBattleStyleDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveBattleStyleName'
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names']
} as const;

export const MoveBattleStyleNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveBattleStyleSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveChangeSchema = {
	type: 'object',
	properties: {
		accuracy: {
			type: ['integer', 'null']
		},
		power: {
			type: ['integer', 'null']
		},
		pp: {
			type: ['integer', 'null']
		},
		effect_chance: {
			type: 'integer'
		},
		effect_entries: {
			type: 'array',
			items: {
				type: 'object',
				required: ['effect', 'short_effect', 'language'],
				properties: {
					effect: {
						type: 'string',
						examples: ['Inflicts [regular damage]{mechanic:regular-damage}.']
					},
					short_effect: {
						type: 'string',
						examples: ['Inflicts regular damage with no additional effect.']
					},
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		type: {
			$ref: '#/components/schemas/TypeSummary'
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		}
	},
	required: ['effect_chance', 'effect_entries', 'type', 'version_group']
} as const;

export const MoveDamageClassDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const MoveDamageClassDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveDamageClassDescription'
			},
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveDamageClassName'
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'moves', 'name', 'names']
} as const;

export const MoveDamageClassNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveDamageClassSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		accuracy: {
			type: ['integer', 'null']
		},
		effect_chance: {
			type: 'integer'
		},
		pp: {
			type: ['integer', 'null']
		},
		priority: {
			type: ['integer', 'null']
		},
		power: {
			type: ['integer', 'null']
		},
		contest_combos: {
			type: 'object',
			required: ['normal', 'super'],
			properties: {
				normal: {
					type: 'object',
					required: ['use_before', 'use_after'],
					properties: {
						use_before: {
							type: 'array',
							nullable: true,
							items: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['fire-punch']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/7/']
									}
								}
							}
						},
						use_after: {
							type: 'array',
							nullable: true,
							items: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['ice-punch']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/8/']
									}
								}
							}
						}
					}
				},
				super: {
					type: 'object',
					required: ['use_before', 'use_after'],
					properties: {
						use_before: {
							type: 'array',
							nullable: true,
							items: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['night-slash']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/400/']
									}
								}
							}
						},
						use_after: {
							type: 'array',
							nullable: true,
							items: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['focus-energy']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/116/']
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		contest_type: {
			$ref: '#/components/schemas/ContestTypeSummary'
		},
		contest_effect: {
			$ref: '#/components/schemas/ContestEffectSummary'
		},
		damage_class: {
			$ref: '#/components/schemas/MoveDamageClassSummary'
		},
		effect_entries: {
			type: 'array',
			items: {
				type: 'object',
				required: ['effect', 'short_effect', 'language'],
				properties: {
					effect: {
						type: 'string',
						examples: ['Inflicts [regular damage]{mechanic:regular-damage}.']
					},
					short_effect: {
						type: 'string',
						examples: ['Inflicts regular damage with no additional effect.']
					},
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		effect_changes: {
			type: 'array',
			items: {
				type: 'object',
				required: ['effect_entries', 'version_group'],
				properties: {
					effect_entries: {
						type: 'array',
						items: {
							type: 'object',
							required: ['effect', 'language'],
							properties: {
								effect: {
									type: 'string',
									examples: ['Hits Pokémon under the effects of dig and fly.']
								},
								language: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['en']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/language/9/']
										}
									}
								}
							}
						}
					},
					version_group: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['gold-silver']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/version-group/3/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		},
		meta: {
			allOf: [
				{
					$ref: '#/components/schemas/MoveMeta'
				}
			],
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveName'
			},
			readOnly: true
		},
		past_values: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveChange'
			},
			readOnly: true
		},
		stat_changes: {
			type: 'array',
			items: {
				type: 'object',
				required: ['change', 'stat'],
				properties: {
					change: {
						type: 'integer',
						format: 'int32',
						examples: [2]
					},
					stat: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['attack']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/stat/1/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		super_contest_effect: {
			$ref: '#/components/schemas/SuperContestEffectSummary'
		},
		target: {
			$ref: '#/components/schemas/MoveTargetSummary'
		},
		type: {
			$ref: '#/components/schemas/TypeSummary'
		},
		machines: {
			type: 'array',
			items: {
				type: 'object',
				required: ['machine', 'version_group'],
				properties: {
					machine: {
						type: 'object',
						required: ['url'],
						properties: {
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/machine/1/']
							}
						}
					},
					version_group: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['sword-shield']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/version-group/1/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveFlavorText'
			},
			readOnly: true
		},
		learned_by_pokemon: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['clefairy']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/pokemon/35/']
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'contest_combos',
		'contest_effect',
		'contest_type',
		'damage_class',
		'effect_chance',
		'effect_changes',
		'effect_entries',
		'flavor_text_entries',
		'generation',
		'id',
		'learned_by_pokemon',
		'machines',
		'meta',
		'name',
		'names',
		'past_values',
		'stat_changes',
		'super_contest_effect',
		'target',
		'type'
	]
} as const;

export const MoveFlavorTextSchema = {
	type: 'object',
	properties: {
		flavor_text: {
			type: 'string'
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		}
	},
	required: ['flavor_text', 'language', 'version_group']
} as const;

export const MoveLearnMethodDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const MoveLearnMethodDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveLearnMethodName'
			},
			readOnly: true
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveLearnMethodDescription'
			},
			readOnly: true
		},
		version_groups: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['red-blue']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/version-group/1/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'name', 'names', 'version_groups']
} as const;

export const MoveLearnMethodNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveLearnMethodSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveMetaSchema = {
	type: 'object',
	properties: {
		ailment: {
			$ref: '#/components/schemas/MoveMetaAilmentSummary'
		},
		category: {
			$ref: '#/components/schemas/MoveMetaCategorySummary'
		},
		min_hits: {
			type: ['integer', 'null']
		},
		max_hits: {
			type: ['integer', 'null']
		},
		min_turns: {
			type: ['integer', 'null']
		},
		max_turns: {
			type: ['integer', 'null']
		},
		drain: {
			type: ['integer', 'null']
		},
		healing: {
			type: ['integer', 'null']
		},
		crit_rate: {
			type: ['integer', 'null']
		},
		ailment_chance: {
			type: ['integer', 'null']
		},
		flinch_chance: {
			type: ['integer', 'null']
		},
		stat_chance: {
			type: ['integer', 'null']
		}
	},
	required: ['ailment', 'category']
} as const;

export const MoveMetaAilmentDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		moves: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['thunder-punch']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/move/9/']
					}
				}
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveMetaAilmentName'
			},
			readOnly: true
		}
	},
	required: ['id', 'moves', 'name', 'names']
} as const;

export const MoveMetaAilmentNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveMetaAilmentSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveMetaCategoryDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const MoveMetaCategoryDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveMetaCategoryDescription'
			},
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['sing']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/move/47/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'moves', 'name']
} as const;

export const MoveMetaCategorySummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const MoveTargetDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const MoveTargetDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveTargetDescription'
			},
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveTargetName'
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'moves', 'name', 'names']
} as const;

export const MoveTargetNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const MoveTargetSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const NatureBattleStylePreferenceSchema = {
	type: 'object',
	properties: {
		low_hp_preference: {
			type: 'integer'
		},
		high_hp_preference: {
			type: 'integer'
		},
		move_battle_style: {
			$ref: '#/components/schemas/MoveBattleStyleSummary'
		}
	},
	required: ['high_hp_preference', 'low_hp_preference', 'move_battle_style']
} as const;

export const NatureDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		decreased_stat: {
			$ref: '#/components/schemas/StatSummary'
		},
		increased_stat: {
			$ref: '#/components/schemas/StatSummary'
		},
		likes_flavor: {
			$ref: '#/components/schemas/BerryFlavorSummary'
		},
		hates_flavor: {
			$ref: '#/components/schemas/BerryFlavorSummary'
		},
		berries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerrySummary'
			},
			readOnly: true
		},
		pokeathlon_stat_changes: {
			type: 'array',
			items: {
				type: 'object',
				required: ['max_change', 'pokeathlon_stat'],
				properties: {
					max_change: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					},
					pokeathlon_stat: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['power']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokeathlon-stat/2/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		move_battle_style_preferences: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/NatureBattleStylePreference'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/NatureName'
			},
			readOnly: true
		}
	},
	required: [
		'berries',
		'decreased_stat',
		'hates_flavor',
		'id',
		'increased_stat',
		'likes_flavor',
		'move_battle_style_preferences',
		'name',
		'names',
		'pokeathlon_stat_changes'
	]
} as const;

export const NatureNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const NatureSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PaginatedAbilitySummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilitySummary'
			}
		}
	}
} as const;

export const PaginatedBerryFirmnessSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerryFirmnessSummary'
			}
		}
	}
} as const;

export const PaginatedBerryFlavorSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerryFlavorSummary'
			}
		}
	}
} as const;

export const PaginatedBerrySummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/BerrySummary'
			}
		}
	}
} as const;

export const PaginatedCharacteristicSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/CharacteristicSummary'
			}
		}
	}
} as const;

export const PaginatedContestEffectSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ContestEffectSummary'
			}
		}
	}
} as const;

export const PaginatedContestTypeSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ContestTypeSummary'
			}
		}
	}
} as const;

export const PaginatedEggGroupSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EggGroupSummary'
			}
		}
	}
} as const;

export const PaginatedEncounterConditionSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterConditionSummary'
			}
		}
	}
} as const;

export const PaginatedEncounterConditionValueSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterConditionValueSummary'
			}
		}
	}
} as const;

export const PaginatedEncounterMethodSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EncounterMethodSummary'
			}
		}
	}
} as const;

export const PaginatedEvolutionChainSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EvolutionChainSummary'
			}
		}
	}
} as const;

export const PaginatedEvolutionTriggerSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/EvolutionTriggerSummary'
			}
		}
	}
} as const;

export const PaginatedGenderSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/GenderSummary'
			}
		}
	}
} as const;

export const PaginatedGenerationSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/GenerationSummary'
			}
		}
	}
} as const;

export const PaginatedGrowthRateSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/GrowthRateSummary'
			}
		}
	}
} as const;

export const PaginatedItemAttributeSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemAttributeSummary'
			}
		}
	}
} as const;

export const PaginatedItemCategorySummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemCategorySummary'
			}
		}
	}
} as const;

export const PaginatedItemFlingEffectSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemFlingEffectSummary'
			}
		}
	}
} as const;

export const PaginatedItemPocketSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemPocketSummary'
			}
		}
	}
} as const;

export const PaginatedItemSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/ItemSummary'
			}
		}
	}
} as const;

export const PaginatedLanguageSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LanguageSummary'
			}
		}
	}
} as const;

export const PaginatedLocationAreaSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationAreaSummary'
			}
		}
	}
} as const;

export const PaginatedLocationSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationSummary'
			}
		}
	}
} as const;

export const PaginatedMachineSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MachineSummary'
			}
		}
	}
} as const;

export const PaginatedMoveBattleStyleSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveBattleStyleSummary'
			}
		}
	}
} as const;

export const PaginatedMoveDamageClassSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveDamageClassSummary'
			}
		}
	}
} as const;

export const PaginatedMoveLearnMethodSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveLearnMethodSummary'
			}
		}
	}
} as const;

export const PaginatedMoveMetaAilmentSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveMetaAilmentSummary'
			}
		}
	}
} as const;

export const PaginatedMoveMetaCategorySummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveMetaCategorySummary'
			}
		}
	}
} as const;

export const PaginatedMoveSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			}
		}
	}
} as const;

export const PaginatedMoveTargetSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveTargetSummary'
			}
		}
	}
} as const;

export const PaginatedNatureSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/NatureSummary'
			}
		}
	}
} as const;

export const PaginatedPalParkAreaSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PalParkAreaSummary'
			}
		}
	}
} as const;

export const PaginatedPokeathlonStatSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokeathlonStatSummary'
			}
		}
	}
} as const;

export const PaginatedPokedexSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokedexSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonColorSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonColorSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonFormSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonFormSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonHabitatSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonHabitatSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonShapeSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonShapeSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonSpeciesSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			}
		}
	}
} as const;

export const PaginatedPokemonSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSummary'
			}
		}
	}
} as const;

export const PaginatedRegionSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/RegionSummary'
			}
		}
	}
} as const;

export const PaginatedStatSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/StatSummary'
			}
		}
	}
} as const;

export const PaginatedSuperContestEffectSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/SuperContestEffectSummary'
			}
		}
	}
} as const;

export const PaginatedTypeSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/TypeSummary'
			}
		}
	}
} as const;

export const PaginatedVersionGroupSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/VersionGroupSummary'
			}
		}
	}
} as const;

export const PaginatedVersionSummaryListSchema = {
	type: 'object',
	properties: {
		count: {
			type: 'integer',
			example: 123
		},
		next: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=400&limit=100'
		},
		previous: {
			type: 'string',
			nullable: true,
			format: 'uri',
			example: 'http://api.example.org/accounts/?offset=200&limit=100'
		},
		results: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/VersionSummary'
			}
		}
	}
} as const;

export const PalParkAreaDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PalParkAreaName'
			},
			readOnly: true
		},
		pokemon_encounters: {
			type: 'array',
			items: {
				type: 'object',
				required: ['base_score', 'pokemon-species', 'rate'],
				properties: {
					base_score: {
						type: 'integer',
						format: 'int32',
						examples: [50]
					},
					'pokemon-species': {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bulbasaur']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon-species/1/']
							}
						}
					},
					rate: {
						type: 'integer',
						format: 'int32',
						examples: [30]
					}
				}
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'pokemon_encounters']
} as const;

export const PalParkAreaNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const PalParkAreaSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokeathlonStatDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		affecting_natures: {
			type: 'object',
			required: ['decrease', 'increase'],
			properties: {
				decrease: {
					type: 'array',
					items: {
						type: 'object',
						required: ['max_change', 'nature'],
						properties: {
							max_change: {
								type: 'integer',
								format: 'int32',
								maximum: -1,
								examples: [-1]
							},
							nature: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['hardy']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/nature/1/']
									}
								}
							}
						}
					}
				},
				increase: {
					type: 'array',
					items: {
						type: 'object',
						required: ['max_change', 'nature'],
						properties: {
							max_change: {
								type: 'integer',
								format: 'int32',
								minimum: 1,
								examples: [2]
							},
							nature: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['hardy']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/nature/1/']
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokeathlonStatName'
			},
			readOnly: true
		}
	},
	required: ['affecting_natures', 'id', 'name', 'names']
} as const;

export const PokeathlonStatNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const PokeathlonStatSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokedexDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const PokedexDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		is_main_series: {
			type: 'boolean'
		},
		descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokedexDescription'
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokedexName'
			},
			readOnly: true
		},
		pokemon_entries: {
			type: 'array',
			items: {
				type: 'object',
				required: ['entry_number', 'pokemon_species'],
				properties: {
					entry_number: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					},
					pokemon_species: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bulbasaur']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon-species/1/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		region: {
			$ref: '#/components/schemas/RegionSummary'
		},
		version_groups: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['the-teal-mask']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/version-group/26/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['descriptions', 'id', 'name', 'names', 'pokemon_entries', 'region', 'version_groups']
} as const;

export const PokedexNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const PokedexSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonColorDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonColorName'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'pokemon_species']
} as const;

export const PokemonColorNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const PokemonColorSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		base_experience: {
			type: ['integer', 'null']
		},
		height: {
			type: ['integer', 'null']
		},
		is_default: {
			type: 'boolean'
		},
		order: {
			type: ['integer', 'null']
		},
		weight: {
			type: ['integer', 'null']
		},
		abilities: {
			type: 'array',
			items: {
				type: 'object',
				required: ['ability', 'is_hidden', 'slot'],
				properties: {
					ability: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['sand-veil']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/ability/8/']
							}
						}
					},
					is_hidden: {
						type: 'boolean'
					},
					slot: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					}
				}
			},
			readOnly: true
		},
		past_abilities: {
			type: 'array',
			items: {
				type: 'object',
				required: ['abilities', 'generation'],
				properties: {
					abilities: {
						type: 'array',
						items: {
							type: 'object',
							required: ['ability', 'is_hidden', 'slot'],
							properties: {
								ability: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['levitate']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/ability/26/']
										}
									}
								},
								is_hidden: {
									type: 'boolean'
								},
								slot: {
									type: 'integer',
									format: 'int32',
									examples: [1]
								}
							}
						}
					},
					generation: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['generation-vi']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/generation/6/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		forms: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonFormSummary'
			},
			readOnly: true
		},
		game_indices: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonGameIndex'
			},
			readOnly: true
		},
		held_items: {
			type: 'object',
			required: ['item', 'version_details'],
			properties: {
				item: {
					type: 'object',
					required: ['name', 'url'],
					properties: {
						name: {
							type: 'string',
							examples: ['soft-sand']
						},
						url: {
							type: 'string',
							format: 'uri',
							examples: ['https://pokeapi.co/api/v2/item/214/']
						}
					}
				},
				version_details: {
					type: 'array',
					items: {
						type: 'object',
						required: ['rarity', 'version'],
						properties: {
							rarity: {
								type: 'integer',
								format: 'int32',
								examples: [5]
							},
							version: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['diamond']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/version/12/']
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		location_area_encounters: {
			type: 'string',
			examples: ['https://pokeapi.co/api/v2/pokemon/1/encounters'],
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				type: 'object',
				required: ['move', 'version_group_details'],
				properties: {
					move: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['scratch']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/move/10/']
							}
						}
					},
					version_group_details: {
						type: 'array',
						items: {
							type: 'object',
							required: ['level_learned_at', 'move_learn_method', 'version_group'],
							properties: {
								level_learned_at: {
									type: 'integer',
									format: 'int32',
									examples: [1]
								},
								move_learn_method: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['level-up']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/move-learn-method/1/']
										}
									}
								},
								version_group: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['red-blue']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/version-group/1/']
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		species: {
			$ref: '#/components/schemas/PokemonSpeciesSummary'
		},
		sprites: {
			type: 'object',
			properties: {
				front_default: {
					type: 'string',
					format: 'uri',
					exmaple:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/1.png'
				}
			},
			additionalProperties: {
				type: 'string',
				format: 'uri',
				nullable: true,
				examples: [
					'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/1.png'
				]
			},
			examples: [
				{
					back_default:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/1.png',
					back_female: null,
					back_shiny:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/1.png',
					back_shiny_female: null,
					front_default:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png',
					front_female: null,
					front_shiny:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/1.png',
					front_shiny_female: null
				}
			],
			readOnly: true
		},
		cries: {
			type: 'object',
			required: ['latest', 'legacy'],
			properties: {
				latest: {
					type: 'string',
					format: 'uri',
					examples: [
						'https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/50.ogg'
					]
				},
				legacy: {
					type: 'string',
					format: 'uri',
					examples: [
						'https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/legacy/50.ogg'
					]
				}
			},
			readOnly: true
		},
		stats: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonStat'
			},
			readOnly: true
		},
		types: {
			type: 'array',
			items: {
				type: 'object',
				required: ['slot', 'type'],
				properties: {
					slot: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					},
					type: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['ghost']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/8/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		past_types: {
			type: 'array',
			items: {
				type: 'object',
				required: ['generation', 'types'],
				properties: {
					generation: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['generation-v']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/generation/5/']
							}
						}
					},
					types: {
						type: 'array',
						items: {
							type: 'object',
							required: ['slot', 'type'],
							properties: {
								slot: {
									type: 'integer',
									format: 'int32',
									examples: [1]
								},
								type: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['normal']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/1/']
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'abilities',
		'cries',
		'forms',
		'game_indices',
		'held_items',
		'id',
		'location_area_encounters',
		'moves',
		'name',
		'past_abilities',
		'past_types',
		'species',
		'sprites',
		'stats',
		'types'
	]
} as const;

export const PokemonDexEntrySchema = {
	type: 'object',
	properties: {
		entry_number: {
			type: 'integer'
		},
		pokedex: {
			$ref: '#/components/schemas/PokedexSummary'
		}
	},
	required: ['entry_number', 'pokedex']
} as const;

export const PokemonFormDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		order: {
			type: ['integer', 'null']
		},
		form_order: {
			type: ['integer', 'null']
		},
		is_default: {
			type: 'boolean'
		},
		is_battle_only: {
			type: 'boolean'
		},
		is_mega: {
			type: 'boolean'
		},
		form_name: {
			type: 'string',
			maxLength: 30
		},
		pokemon: {
			$ref: '#/components/schemas/PokemonSummary'
		},
		sprites: {
			type: 'object',
			properties: {
				default: {
					type: 'string',
					format: 'uri',
					examples: [
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/412.png'
					]
				}
			},
			additionalProperties: {
				type: 'string',
				format: 'uri',
				nullable: true,
				examples: [
					'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/412.png'
				]
			},
			examples: [
				{
					back_default:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/412.png',
					back_female: null,
					back_shiny:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/412.png',
					back_shiny_female: null,
					front_default:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/412.png',
					front_female: null,
					front_shiny:
						'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/412.png',
					front_shiny_female: null
				}
			],
			readOnly: true
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		},
		form_names: {
			type: 'array',
			items: {
				type: 'object',
				required: ['language', 'name'],
				properties: {
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					},
					name: {
						type: 'string',
						examples: ['Plant Cloak']
					}
				}
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				type: 'object',
				required: ['language', 'name'],
				properties: {
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					},
					name: {
						type: 'string',
						examples: ['Plant Cloak']
					}
				}
			},
			readOnly: true
		},
		types: {
			type: 'array',
			items: {
				type: 'object',
				required: ['slot', 'type'],
				properties: {
					slot: {
						type: 'integer',
						format: 'int32',
						examples: [1]
					},
					type: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bug']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/7/']
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'form_name',
		'form_names',
		'id',
		'name',
		'names',
		'pokemon',
		'sprites',
		'types',
		'version_group'
	]
} as const;

export const PokemonFormSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonGameIndexSchema = {
	type: 'object',
	properties: {
		game_index: {
			type: 'integer'
		},
		version: {
			$ref: '#/components/schemas/VersionSummary'
		}
	},
	required: ['game_index', 'version']
} as const;

export const PokemonHabitatDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonHabitatName'
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			},
			readOnly: true
		}
	},
	required: ['id', 'name', 'names', 'pokemon_species']
} as const;

export const PokemonHabitatNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const PokemonHabitatSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonShapeDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		awesome_names: {
			type: 'array',
			items: {
				type: 'object',
				required: ['awesome_name', 'language'],
				properties: {
					awesome_name: {
						type: 'string',
						examples: ['Pomaceous']
					},
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				type: 'object',
				required: ['url', 'name'],
				properties: {
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/language/9/']
					},
					name: {
						type: 'string',
						examples: ['Ball']
					}
				}
			},
			readOnly: true
		},
		pokemon_species: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesSummary'
			},
			readOnly: true
		}
	},
	required: ['awesome_names', 'id', 'name', 'names', 'pokemon_species']
} as const;

export const PokemonShapeSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonSpeciesDescriptionSchema = {
	type: 'object',
	properties: {
		description: {
			type: 'string',
			maxLength: 1000
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language']
} as const;

export const PokemonSpeciesDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		order: {
			type: ['integer', 'null']
		},
		gender_rate: {
			type: ['integer', 'null']
		},
		capture_rate: {
			type: ['integer', 'null']
		},
		base_happiness: {
			type: ['integer', 'null']
		},
		is_baby: {
			type: 'boolean'
		},
		is_legendary: {
			type: 'boolean'
		},
		is_mythical: {
			type: 'boolean'
		},
		hatch_counter: {
			type: ['integer', 'null']
		},
		has_gender_differences: {
			type: 'boolean'
		},
		forms_switchable: {
			type: 'boolean'
		},
		growth_rate: {
			$ref: '#/components/schemas/GrowthRateSummary'
		},
		pokedex_numbers: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonDexEntry'
			},
			readOnly: true
		},
		egg_groups: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['monster']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/egg-group/1/']
					}
				}
			},
			readOnly: true
		},
		color: {
			$ref: '#/components/schemas/PokemonColorSummary'
		},
		shape: {
			$ref: '#/components/schemas/PokemonShapeSummary'
		},
		evolves_from_species: {
			$ref: '#/components/schemas/PokemonSpeciesSummary'
		},
		evolution_chain: {
			$ref: '#/components/schemas/EvolutionChainSummary'
		},
		habitat: {
			$ref: '#/components/schemas/PokemonHabitatSummary'
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		},
		names: {
			type: 'array',
			items: {
				type: 'object',
				required: ['language', 'name'],
				properties: {
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					},
					name: {
						type: 'string',
						examples: ['bulbasaur']
					}
				}
			},
			readOnly: true
		},
		pal_park_encounters: {
			type: 'array',
			items: {
				type: 'object',
				required: ['area', 'base_score', 'rate'],
				properties: {
					area: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['field']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pal-park-area/2/']
							}
						}
					},
					base_score: {
						type: 'integer',
						format: 'int32',
						examples: [50]
					},
					rate: {
						type: 'integer',
						format: 'int32',
						examples: [30]
					}
				}
			},
			readOnly: true
		},
		form_descriptions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesDescription'
			},
			readOnly: true
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokemonSpeciesFlavorText'
			},
			readOnly: true
		},
		genera: {
			type: 'array',
			items: {
				type: 'object',
				required: ['genus', 'language'],
				properties: {
					genus: {
						type: 'string',
						examples: ['Seed Pokémon']
					},
					language: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['en']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/language/9/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		varieties: {
			type: 'array',
			items: {
				type: 'object',
				required: ['is_default', 'pokemon'],
				properties: {
					is_default: {
						type: 'boolean'
					},
					pokemon: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bulbasaur']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/pokemon/1/']
							}
						}
					}
				}
			},
			readOnly: true
		}
	},
	required: [
		'color',
		'egg_groups',
		'evolution_chain',
		'evolves_from_species',
		'flavor_text_entries',
		'form_descriptions',
		'genera',
		'generation',
		'growth_rate',
		'habitat',
		'id',
		'name',
		'names',
		'pal_park_encounters',
		'pokedex_numbers',
		'shape',
		'varieties'
	]
} as const;

export const PokemonSpeciesFlavorTextSchema = {
	type: 'object',
	properties: {
		flavor_text: {
			type: 'string'
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		},
		version: {
			$ref: '#/components/schemas/VersionSummary'
		}
	},
	required: ['flavor_text', 'language', 'version']
} as const;

export const PokemonSpeciesSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const PokemonStatSchema = {
	type: 'object',
	properties: {
		base_stat: {
			type: 'integer'
		},
		effort: {
			type: 'integer'
		},
		stat: {
			$ref: '#/components/schemas/StatSummary'
		}
	},
	required: ['base_stat', 'effort', 'stat']
} as const;

export const PokemonSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const RegionDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		locations: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/LocationSummary'
			},
			readOnly: true
		},
		main_generation: {
			allOf: [
				{
					$ref: '#/components/schemas/GenerationSummary'
				}
			],
			readOnly: true
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/RegionName'
			},
			readOnly: true
		},
		pokedexes: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/PokedexSummary'
			},
			readOnly: true
		},
		version_groups: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['red-blue']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/version-group/1/']
					}
				}
			},
			readOnly: true
		}
	},
	required: ['id', 'locations', 'main_generation', 'name', 'names', 'pokedexes', 'version_groups']
} as const;

export const RegionNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const RegionSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const StatDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		game_index: {
			type: 'integer'
		},
		is_battle_only: {
			type: 'boolean'
		},
		affecting_moves: {
			type: 'object',
			required: ['decrease', 'increase'],
			properties: {
				increase: {
					type: 'array',
					items: {
						type: 'object',
						required: ['change', 'move'],
						properties: {
							change: {
								type: 'integer',
								format: 'int32',
								examples: [-1]
							},
							move: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['swords-dance']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/14/']
									}
								}
							}
						}
					}
				},
				decrease: {
					type: 'array',
					items: {
						type: 'object',
						required: ['change', 'move'],
						properties: {
							change: {
								type: 'integer',
								format: 'int32',
								examples: [5]
							},
							move: {
								type: 'object',
								required: ['name', 'url'],
								properties: {
									name: {
										type: 'string',
										examples: ['growl']
									},
									url: {
										type: 'string',
										format: 'uri',
										examples: ['https://pokeapi.co/api/v2/move/45/']
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		affecting_natures: {
			type: 'object',
			required: ['increase', 'decrease'],
			properties: {
				increase: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['lonely']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/nature/6/']
							}
						}
					}
				},
				decrease: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bold']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/nature/2/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		characteristics: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/CharacteristicSummary'
			},
			readOnly: true
		},
		move_damage_class: {
			$ref: '#/components/schemas/MoveDamageClassSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/StatName'
			},
			readOnly: true
		}
	},
	required: [
		'affecting_moves',
		'affecting_natures',
		'characteristics',
		'game_index',
		'id',
		'move_damage_class',
		'name',
		'names'
	]
} as const;

export const StatNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const StatSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const SuperContestEffectDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		appeal: {
			type: 'integer'
		},
		flavor_text_entries: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/SuperContestEffectFlavorText'
			},
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			},
			readOnly: true
		}
	},
	required: ['appeal', 'flavor_text_entries', 'id', 'moves']
} as const;

export const SuperContestEffectFlavorTextSchema = {
	type: 'object',
	properties: {
		flavor_text: {
			type: 'string',
			maxLength: 500
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['flavor_text', 'language']
} as const;

export const SuperContestEffectSummarySchema = {
	type: 'object',
	properties: {
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['url']
} as const;

export const TypeDetailSchema = {
	type: 'object',
	description: 'Serializer for the Type resource',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		damage_relations: {
			type: 'object',
			required: [
				'no_damage_to',
				'half_damage_to',
				'double_damage_to',
				'no_damage_from',
				'half_damage_from',
				'double_damage_from'
			],
			properties: {
				no_damage_to: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['flying']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/3/']
							}
						}
					}
				},
				half_damage_to: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['bug']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/7/']
							}
						}
					}
				},
				double_damage_to: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['poison']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/4/']
							}
						}
					}
				},
				no_damage_from: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['electric']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/13/']
							}
						}
					}
				},
				half_damage_from: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['poison']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/4/']
							}
						}
					}
				},
				double_damage_from: {
					type: 'array',
					items: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['water']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/type/11/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		past_damage_relations: {
			type: 'array',
			items: {
				type: 'object',
				required: ['generation', 'damage_relations'],
				properties: {
					generation: {
						type: 'object',
						required: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								examples: ['generation-v']
							},
							url: {
								type: 'string',
								format: 'uri',
								examples: ['https://pokeapi.co/api/v2/generation/5/']
							}
						}
					},
					damage_relations: {
						type: 'object',
						required: [
							'no_damage_to',
							'half_damage_to',
							'double_damage_to',
							'no_damage_from',
							'half_damage_from',
							'double_damage_from'
						],
						properties: {
							no_damage_to: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['flying']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/3/']
										}
									}
								}
							},
							half_damage_to: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['bug']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/7/']
										}
									}
								}
							},
							double_damage_to: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['poison']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/4/']
										}
									}
								}
							},
							no_damage_from: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['electric']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/13/']
										}
									}
								}
							},
							half_damage_from: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['poison']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/4/']
										}
									}
								}
							},
							double_damage_from: {
								type: 'array',
								items: {
									type: 'object',
									required: ['name', 'url'],
									properties: {
										name: {
											type: 'string',
											examples: ['water']
										},
										url: {
											type: 'string',
											format: 'uri',
											examples: ['https://pokeapi.co/api/v2/type/11/']
										}
									}
								}
							}
						}
					}
				}
			},
			readOnly: true
		},
		game_indices: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/TypeGameIndex'
			},
			readOnly: true
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		},
		move_damage_class: {
			$ref: '#/components/schemas/MoveDamageClassSummary'
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/AbilityName'
			},
			readOnly: true
		},
		pokemon: {
			type: 'array',
			items: {
				type: 'object',
				required: ['potency', 'flavor'],
				properties: {
					slot: {
						type: 'integer',
						examples: [1]
					},
					pokemon: {
						type: 'object',
						require: ['name', 'url'],
						properties: {
							name: {
								type: 'string',
								description: 'The name of the pokemon',
								examples: ['sandshrew']
							},
							url: {
								type: 'string',
								format: 'uri',
								description: 'The URL to get more information about the pokemon',
								examples: ['https://pokeapi.co/api/v2/pokemon/27/']
							}
						}
					}
				}
			},
			readOnly: true
		},
		moves: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/MoveSummary'
			},
			readOnly: true
		},
		sprites: {
			type: 'object',
			additionalProperties: {
				type: 'object',
				additionalProperties: {
					type: 'object',
					properties: {
						'name-icon': {
							type: 'string',
							format: 'uri',
							examples: [
								'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/colosseum/1.png'
							]
						}
					},
					examples: [
						{
							colosseum: {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/colosseum/1.png'
							}
						}
					]
				},
				examples: [
					{
						'generation-ix': {
							'scarlet-violet': {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-ix/scarlet-violet/1.png'
							}
						}
					}
				]
			},
			examples: [
				{
					sprites: {
						'generation-iii': {
							colosseum: {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/colosseum/1.png'
							},
							emerald: {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/emerald/1.png'
							},
							'firered-leafgreen': {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/firered-leafgreen/1.png'
							},
							'ruby-saphire': {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/ruby-saphire/1.png'
							},
							xd: {
								name_icon:
									'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-iii/xd/1.png'
							}
						}
					}
				}
			],
			readOnly: true
		}
	},
	required: [
		'damage_relations',
		'game_indices',
		'generation',
		'id',
		'move_damage_class',
		'moves',
		'name',
		'names',
		'past_damage_relations',
		'pokemon',
		'sprites'
	]
} as const;

export const TypeGameIndexSchema = {
	type: 'object',
	properties: {
		game_index: {
			type: 'integer'
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		}
	},
	required: ['game_index', 'generation']
} as const;

export const TypeSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const VersionDetailSchema = {
	type: 'object',
	description: `Should have a link to Version Group info but the Circular
dependency and compilation order fight eachother and I'm
not sure how to add anything other than a hyperlink`,
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		names: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/VersionName'
			},
			readOnly: true
		},
		version_group: {
			$ref: '#/components/schemas/VersionGroupSummary'
		}
	},
	required: ['id', 'name', 'names', 'version_group']
} as const;

export const VersionGroupDetailSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			readOnly: true
		},
		name: {
			type: 'string',
			maxLength: 200
		},
		order: {
			type: ['integer', 'null']
		},
		generation: {
			$ref: '#/components/schemas/GenerationSummary'
		},
		move_learn_methods: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['level-up']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/move-learn-method/1/']
					}
				}
			},
			readOnly: true
		},
		pokedexes: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['kanto']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/pokedex/2/']
					}
				}
			},
			readOnly: true
		},
		regions: {
			type: 'array',
			items: {
				type: 'object',
				required: ['name', 'url'],
				properties: {
					name: {
						type: 'string',
						examples: ['kanto']
					},
					url: {
						type: 'string',
						format: 'uri',
						examples: ['https://pokeapi.co/api/v2/region/1/']
					}
				}
			},
			readOnly: true
		},
		versions: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/VersionSummary'
			},
			readOnly: true
		}
	},
	required: ['generation', 'id', 'move_learn_methods', 'name', 'pokedexes', 'regions', 'versions']
} as const;

export const VersionGroupSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;

export const VersionNameSchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		language: {
			$ref: '#/components/schemas/LanguageSummary'
		}
	},
	required: ['language', 'name']
} as const;

export const VersionSummarySchema = {
	type: 'object',
	properties: {
		name: {
			type: 'string',
			maxLength: 200
		},
		url: {
			type: 'string',
			format: 'uri',
			readOnly: true
		}
	},
	required: ['name', 'url']
} as const;
